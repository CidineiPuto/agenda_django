Agora será criado um formulário de login.
Aliás, vamos colocar o form inteiro do register em um partials dentro do contact que
iremos criar, no;

contact/templates/contact/
vamos criar o
/partials/_user-form.html

Agora vamos criar uma url de login.
No login, vamos copiar o register, porém, vamos mudar o nome por "login.html".
Vamos criar uma view para o login, dentro de user_forms.py

from django.contrib.auth.forms import AuthenticationForm

    def login_view(request):
        form = AuthenticationForm(request)

        if request.method == "POST":
            form = AuthenticationForm(request, data=request.POST)

            if form.is_valid():
                user = form.get_user()

        return render(
            request,
            "contact/login.html",
            {
                "form": form,
            },
        )
O AuthenticationForm diferente de outras classes, recebe primeiro o request, e depois
o data.
Mas, após isso vamos criar a url do login.

    path("user/login/", views.login_view, name="login"),

Nós pegamos o "user = form.get_user()" caso o login der sucesso ele irá encontrar o
usuário, porém não irá o autenticar por enquanto. Mas se for passado uma senha errada
será mostrado um erro.

Dentro de login.html, nós temos acesso ao usuário que está logado na página.

    <h2>Login {{ user }} {{ user.is_authenticated }}</h2>

Se não tiver logado com nenhum usuário, será mostrado "anonymous user".

Lá no user_forms.py no views;

from django.contrib import auth

Vamos importar isso.


        if form.is_valid():
            user = form.get_user()
            messages.success(request, "Logged in successfully")
            auth.login(request, user)

Temos outra coisa chamada login que é o que faz o login do usuário.
Após isso, agora dentro do login.html vamos mexer nisso usando o "user.is_authenticated".

    {% if user.is_authenticated %}
      <p>
        You are logged in as {{ user.username }}.
        To exit, click <a href=''>here</a>
      </p>
    {% else %}
      {% include "contact/partials/_user-form.html" %}
    {% endif %}

Agora a página só será mostrada se a pessoa não tiver feito o login, então podemos
fazer a opção de logout.

Para criar o logout, primeiro, será feito a url dele;
    path("user/logout/", views.logout_view, name="logout"),

Agora, vamos criar a view;

def logout_view(request):
    auth.logout(request)
    return redirect("contact:login")

Depois, adicionar o link dela no template;

    {% if user.is_authenticated %}
      <p>
        You are logged in as {{ user.username }}.
        To exit, click <a href="{% url 'contact:logout' %}">here</a>.
      </p>
    {% else %}

Agora, dentro da user_forms, vamos colocar algo para ser redirecionado para o login;

        if form.is_valid():
            user = form.get_user()
            messages.success(request, "Logged in successfully")
            auth.login(request, user)
            return redirect("contact:index")
        messages.error(request, "Invalid login")

E por conta de ter feito o login, se clicarr