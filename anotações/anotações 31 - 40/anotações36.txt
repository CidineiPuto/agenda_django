Vamos adicionar primeiramente algumas coisas no "static" depois vamos usar o;

"python manage.py collectstatic"

Dentro do contact vamos criar uma div com a classe "contact-links" que já tem um css.

    <div class="contact-links">
      <a href="{% url "contact:update" contact.id %}">Update</a>
    </div>

E assim será feito o update.
Quando você abre um link, você está fazendo uma requisição do tipo get pro navegador,
informando que quer ler algo. Porém, o delete você irá fazer algo, então, ele será
dentro de um form.

Agora, dentro do "a" no update, vamos colocar a classe "btn btn-link"

    <div class="contact-links">
      <a class="btn btn-link" href="{% url "contact:update" contact.id %}">Update</a>
    </div>

As configurações já estão prontas no css.
Porém o form será realmente um botão.

      <form action="" method="post">
        {% csrf_token %}
        <button class="btn btn-link btn-delete "type="submit">Delete</button>
      </form>

Lembre, que por ser um form submit, será necessário um "csrf_token".
Por enquanto vamos colocar coisas simples na view delete que iremos criar;

    def delete(request, contact_id):
        contact = get_object_or_404(
            Contact,
            pk=contact_id,
            show=True,
        )

Agora iremos ir na urls.py do contact, para criar a url do delete.

    path("contact/<int:contact_id>/delete/", views.delete, name="delete"),

Agora temos uma url para colocar no form. No action do formulário em contact.html, vamos
colocar o action enviando isso para a url do delete.

      <form action="{% url "contact:delete" contact.id %}" method="post">

E iremos passar o id também.
Mas, para a pessoa não apagar direto, iremos mandar uma confirmação, para saber se
a pessoa vai querer mesmo apagar aquilo.
Primeiro, quando a pessoa enviar o formulário através do button de delete, ela irá
para a view de delete. Lá nessa view, não iremos deletar de cara.

    return render(
        request,
        "contact/contact.html",
        {"contact": contact},
    )

Ele irá renderizar a mesma página se isso for usado.
Podemos tentar obter algo de dentro do post.

    confirmation = request.POST.get("confirmation", "no")
    if confirmation == "yes":
        contact.delete()
        return redirect("contact:index")

Do post vamos pegar algo chamado confirmation, se não existir, ele será "no".
Dentro do contact.html, iremos fazer isso;

      {% if confirmation == "no" %}
        <button class="btn btn-link btn-delete" type="submit">Confirm</button>
      {% else %}
        <button class="btn btn-link btn-delete" type="submit">Delete</button>
      {% endif %}

Queremos que quando clicar o botão mostre o texto confirme.
Para isso aparecer, temos que colocar na view.

    return render(
        request,
        "contact/contact.html",
        {
            "contact": contact,
            "confirmation": confirmation,
        },
    )

Agora sim irá dar certo.
Agora, vamos fazer caso clicar o confirmation vire sim.

    <input type="hidden" name="confirmation" value="yes">

Agora, se a pessoa clicar em confirm, o input escondido fará o contato ser deletado.