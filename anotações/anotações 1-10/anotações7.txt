O django tem um shell igual ao python, em que você pode adicionar algumas coisas no shell
para sair é quit()
Logo você pode usar "manage.py shell". Pode importar dentro dele o model, exemplo;

from contact.models import contact

E pode fazer coisas dentro disso também, ex;

c = Contact(first_name='Gustavo')

Ele ainda mesmo feito isso, não foi salvo na base de dados, pois isso fica na memória,
para isso ocorrer, tem que colocar;

c.save()

Aliás o blank não vai funcionar, apenas se for passar por um form.

Para colocarmos por exemplo, o last_name e o phone; 

    c.last_name = 'Moreira'

Mas lembre que ele tem que estar em uma variável já.

Podemos salvar, mas também podemos deletar;

    c.save()

Salva

    c.delete()

Deleta.

Mas por conta dele ainda estar salvo na memória, mesmo por ter sido deletado,
se colocarmos c.save() ele cria um novo contato com uma nova id.

Existe algo que é chamado de;

c = Contact.objects.get()

Ele só tem que receber um valor, ex;

c = Contact.objects.get(id=4)

O c irá virar isto, e permita que você faça alterações no objeto que foi pego no get.

Aliás, ele sabe que a pk é igual o  id, tanto que se colocar c.pk ele irá mostrar
o número de id.

Outra coisa é o query set que pega varios valores;

    c = Contact.objects.all()

Pode ser feito um for já que está com vários objetos.

    for contato in c: contato.first_name

Mas algo que costumamos mais a fazer é usar um filtro, exemplo;

c = Contact.objects.filter(pk=10) ou (id=10)

Ou pode pegar o;

    c = Contact.objects.all().filter(id=10)

Puxa tudo e pega só o que tiver id=10, mas também pode ser feito com um order_by;

    c = Contact.objects.all().order_by('-id')

Todos contatos ordenados por id decrescente.
Se tirar o '-' será crescente.

E também possui o create.

    c = Contact.objects.create(first_name='Edu', last_name='Vieira')

Ele vai direto para o banco de dados, sem precisar de salvar.

